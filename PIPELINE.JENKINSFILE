

def createStages() {
  stage_map = [:]
  stage_map.put('test-profile-Coca-Cola', {echo '-= test1=-'})
  stage_map.put('test-profile-Pepsi', {echo '-= test2=-'})
  stage_map.put('test-profile-Sprite', {echo '-= test3=-'})
  stage_map.put('test-profile-Fanta', {echo '-= test4=-'})
  stage_map.put('test-profile-Schweppes', {echo '-= test5=-'})
  return stage_map
}

def git_clone (Map config){
    def repository = config.repo_url

    echo "-= Attempting to checkout ${repository}=-"

    def cmd = """git clone ${repository}"""
    if(isUnix()){
        echo "CURRENT SYSTEM IS LINUX"
        ls """${cmd}"""
    }else{
        echo "CURRENT SYSTEM IS WINDOWS"
        bat """${cmd}"""
    }

}

def docker_build(Map config){
    def name_of_image = config.image_name
    def tag_of_image = config.tag_name
    def dir = config.build_dir

    echo "-= Attempting to Build Docker Image ${name_of_image} =-"
    
    def cmd = """cd ${dir} && docker build --tag "${name_of_image}:${tag_of_image}" . """
    if(isUnix()){
        ls """${cmd}"""
        echo "CURRENT SYSTEM IS LINUX"
    }else{
        echo "CURRENT SYSTEM IS WINDOWS"
        bat """${cmd}"""
    }
    
}

def docker_run(Map config){
    def name_of_image = config.image_name
    def tag_of_image = config.tag_name

    echo "-= Attempting to Run Docker Image ${name_of_image} =-"

    def cmd = """docker run ${name_of_image}:${tag_of_image}"""
    if(isUnix()){
        echo "CURRENT SYSTEM IS LINUX"
        ls """${cmd}"""
    }else{
        echo "CURRENT SYSTEM IS WINDOWS"
        bat """${cmd}"""
    }
}

def send_email (Map config){
    def name = config.recepient
    def context = config.message
    try{
        echo "Sending email to ${name}. ${context}"
    }catch(error){
        currentBuild.result = "UNSTABLE"
        println "Function 'send_email' Broke for some reason."
        println "ERROR: ${error}"
    }
}





pipeline{

    agent any

    options {
        timeout(time: 12, unit: 'HOURS') 
    }

    parameters {
        string(name: 'IMAGE_NAME', defaultValue: 'docker-hello-world', description: 'Write Docker image Name')
        string(name: 'IMAGE_TAG', defaultValue: 'latest', description: 'Write Docker image Tag name')
    }

    stages{
        stage("CheckOut"){
            steps{
                dir("application-hello"){
                    script{
                        deleteDir()
                        git_clone(repo_url: "https://github.com/dimiturmomchev/nex-test.git")
                    }
                }
            }
        }
        stage("Build"){
            steps{
                dir("application-hello"){
                    script{
                        docker_build(
                            build_dir: "nex-test",
                            image_name: "${params.IMAGE_NAME}",
                            tag_name: "${params.IMAGE_TAG}"
                        )
                    }
                }
            }
        }
        stage('Testing - Stage') {
            steps{
                script { parallel(createStages()) }
                }
        }
        stage("Run"){
            steps{
                dir("app-1"){
                    script{
                        docker_run(
                            image_name: "${params.IMAGE_NAME}",
                            tag_name: "${params.IMAGE_TAG}"
                        )
                    }
                }
            }
        }
        stage("Docker Compose"){
            steps{
                dir("app-1"){
                    script{
                        
                        echo "-= Attempting to Run Docker Compose =-"

                        def cmd = """docker compose up"""
                        if(isUnix()){
                            echo "CURRENT SYSTEM IS LINUX"
                            ls """${cmd}"""
                        }else{
                            echo "CURRENT SYSTEM IS WINDOWS"
                            bat """${cmd}"""
                        }
                    }
                }
            }
        }
        stage("DeleteDir"){
            steps{
                script{
                    deleteDir()
                }
            }
        }
    }

    post{
        failure{
            send_email(
                recepient: "dimitar",
                message: "Failed build "
            )
        }
        success{
            send_email(
                recepient: "dimitar",
                message: "Successfull build "
            )
        }

    }

}